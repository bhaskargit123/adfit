{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adfbhaskar123"
		},
		"ls_azSQL_DATASTORE_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_azSQL_DATASTORE'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ls_azSQL_DATASTORE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_azSQL_DATASTORE_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azSQL_DATASTORE_Query')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_azSQL_DATASTORE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CustomerID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FName",
						"type": "varchar"
					},
					{
						"name": "Location",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_DATASTORE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_scd_type_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_azSQL_DATASTORE_Query",
								"type": "DatasetReference"
							},
							"name": "customer"
						},
						{
							"dataset": {
								"referenceName": "ds_azSQL_DATASTORE_Query",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "ls_azSQL_DATASTORE",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						},
						{
							"linkedService": {
								"referenceName": "ls_azSQL_DATASTORE",
								"type": "LinkedServiceReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "srcSelect"
						},
						{
							"name": "TrgSelect"
						},
						{
							"name": "exists1"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "select2",
							"description": "Renaming filter1 to select2 with columns 'CustKey, CustomerID, FName, Location'"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          FName as string,",
						"          Location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT * FROM customer',",
						"     format: 'query') ~> customer",
						"source(output(",
						"          CustKey as integer,",
						"          CustomerID as integer,",
						"          FName as string,",
						"          Location as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT * FROM DimCustomer',",
						"     format: 'query') ~> DimCustomer",
						"customer select(mapColumn(",
						"          Src_CustomerID = CustomerID,",
						"          Src_FName = FName,",
						"          Src_Location = Location",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> srcSelect",
						"DimCustomer select(mapColumn(",
						"          CustKey,",
						"          Trg_CustomerID = CustomerID,",
						"          Trg_FName = FName,",
						"          Trg_Location = Location",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> TrgSelect",
						"srcSelect, TrgSelect exists(Src_CustomerID == Trg_CustomerID,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 select(mapColumn(",
						"          CustomerID = Src_CustomerID,",
						"          FName = Src_FName,",
						"          Location = Src_Location",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"srcSelect, TrgSelect lookup(Src_CustomerID == Trg_CustomerID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(IsUpdated = iif(Src_FName!=Trg_FName || Src_Location!=Trg_Location, 1, 0)) ~> derivedColumn1",
						"derivedColumn1 filter(IsUpdated==1) ~> filter1",
						"filter1 select(mapColumn(",
						"          CustKey,",
						"          CustomerID = Src_CustomerID,",
						"          FName = Src_FName,",
						"          Location = Src_Location",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 alterRow(updateIf(1==1)) ~> alterRow1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustKey as integer,",
						"          CustomerID as integer,",
						"          FName as string,",
						"          Location as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'DimCustomer',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          FName,",
						"          Location",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustKey as integer,",
						"          CustomerID as integer,",
						"          FName as string,",
						"          Location as string",
						"     ),",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'DimCustomer',",
						"     insertable: false,",
						"     updateable: true,",
						"     deletable: false,",
						"     upsertable: false,",
						"     keys:['CustKey'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustKey,",
						"          CustomerID,",
						"          FName,",
						"          Location",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azSQL_DATASTORE_Query')]",
				"[concat(variables('factoryId'), '/linkedServices/ls_azSQL_DATASTORE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_scd_type-1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_scd_type_1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"customer": {},
									"DimCustomer": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_scd_type_1')]"
			]
		}
	]
}