{
	"name": "df_scd_type_1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_azSQL_DATASTORE_Query",
						"type": "DatasetReference"
					},
					"name": "customer"
				},
				{
					"dataset": {
						"referenceName": "ds_azSQL_DATASTORE_Query",
						"type": "DatasetReference"
					},
					"name": "DimCustomer"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_azSQL_DATASTORE",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "ls_azSQL_DATASTORE",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "srcSelect"
				},
				{
					"name": "TrgSelect"
				},
				{
					"name": "exists1"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "select2"
				},
				{
					"name": "alterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          FName as string,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT * FROM customer',",
				"     format: 'query') ~> customer",
				"source(output(",
				"          CustKey as integer,",
				"          CustomerID as integer,",
				"          FName as string,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     query: 'SELECT * FROM DimCustomer',",
				"     format: 'query') ~> DimCustomer",
				"customer select(mapColumn(",
				"          Src_CustomerID = CustomerID,",
				"          Src_FName = FName,",
				"          Src_Location = Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> srcSelect",
				"DimCustomer select(mapColumn(",
				"          CustKey,",
				"          Trg_CustomerID = CustomerID,",
				"          Trg_FName = FName,",
				"          Trg_Location = Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TrgSelect",
				"srcSelect, TrgSelect exists(Src_CustomerID == Trg_CustomerID,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 select(mapColumn(",
				"          CustomerID = Src_CustomerID,",
				"          FName = Src_FName,",
				"          Location = Src_Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"srcSelect, TrgSelect lookup(Src_CustomerID == Trg_CustomerID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 derive(IsUpdated = iif(Src_FName!=Trg_FName || Src_Location!=Trg_Location, 1, 0)) ~> derivedColumn1",
				"derivedColumn1 filter(IsUpdated==1) ~> filter1",
				"filter1 select(mapColumn(",
				"          CustKey,",
				"          Src_CustomerID,",
				"          Src_FName,",
				"          Src_Location",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 alterRow(updateIf(1==1)) ~> alterRow1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustKey as integer,",
				"          CustomerID as integer,",
				"          FName as string,",
				"          Location as string",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'DimCustomer',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustomerID,",
				"          FName,",
				"          Location",
				"     )) ~> sink1",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CustKey as integer,",
				"          CustomerID as integer,",
				"          FName as string,",
				"          Location as string",
				"     ),",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'DimCustomer',",
				"     insertable: false,",
				"     updateable: true,",
				"     deletable: false,",
				"     upsertable: false,",
				"     keys:['CustKey'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          CustKey,",
				"          Src_CustomerID,",
				"          Src_FName,",
				"          Src_Location",
				"     )) ~> sink2"
			]
		}
	}
}